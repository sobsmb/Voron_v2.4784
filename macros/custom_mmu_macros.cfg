## Overriden macro to enable MMU parking command to take place immediately 
## after the filament cut motion
[gcode_macro _FILAMETRIX_DO_CUT_MOTION]
description: Helper to do a single cut movement
gcode:
    {% set pin_park_x_loc = params.PIN_PARK_X_LOC | float %}
    {% set pin_park_y_loc = params.PIN_PARK_Y_LOC | float %}
    {% set vars = printer['gcode_macro _MMU_CUT_TIP_VARS'] %}
    {% set cutting_axis = vars['cutting_axis'] %}

    {% set pin_loc = vars['pin_loc_compressed']|default(-999)|float %}
    {% if pin_loc != -999 %}
        # Old one-dimensional pin_loc_compressed config
        {% if cutting_axis == "x" %}
            {% set pin_loc_compressed_x = pin_loc %}
            {% set pin_loc_compressed_y = pin_park_y_loc %}
        {% else %}
            {% set pin_loc_compressed_x = pin_park_x_loc %}   
            {% set pin_loc_compressed_y = pin_loc %}
        {% endif %}
    {% else %}
        # New config
        {% set pin_loc_compressed_x, pin_loc_compressed_y = vars.pin_loc_compressed_xy|map('float') %}
    {% endif %}
        
    {% set cut_fast_move_fraction = vars['cut_fast_move_fraction']|float %}
    {% set cut_fast_move_speed = vars['cut_fast_move_speed']|float %}
    {% set cut_slow_move_speed = vars['cut_slow_move_speed']|float %}
    {% set cut_dwell_time = vars['cut_dwell_time']|float %}
    {% set evacuate_speed = vars['evacuate_speed']|float %}
    {% set rip_length = vars['rip_length']|float %}
    {% set rip_speed = vars['rip_speed']|float %}


    {% set fast_slow_transition_loc_x = (pin_loc_compressed_x - pin_park_x_loc) * cut_fast_move_fraction + pin_park_x_loc|float %}
    {% set fast_slow_transition_loc_y = (pin_loc_compressed_y - pin_park_y_loc) * cut_fast_move_fraction + pin_park_y_loc|float %}
    G1 X{fast_slow_transition_loc_x} Y{fast_slow_transition_loc_y} F{cut_fast_move_speed * 60} # Fast move to initiate contact of the blade with filament
    G1 X{pin_loc_compressed_x} Y{pin_loc_compressed_y} F{cut_slow_move_speed * 60} # Do the cut in slow move

    M400 # IG Changes
    G4 P{cut_dwell_time}
    M400 # IG Changes
    
    {% if rip_length > 0 %}
        G1 E-{rip_length} F{rip_speed * 60}
    {% endif %}

    G1 X{pin_park_x_loc} Y{pin_park_y_loc} F{evacuate_speed * 60} # Evacuate
    
    # IG Changes
    # wait for cut move to complete and then move immediately to park position and restore print acceleration
    _MMU_PARK FORCE_PARK=1 X=35 Y=357 Z_HOP=0
    _SET_PRINT_CURRENT
    M400


## Custom macro setting print current to a lower value than the configured value
## used via a delayed gcode when initializing the printer as well as after the filament 
## cut motion
[gcode_macro _SET_PRINT_CURRENT]
gcode:  
    M400
    SAVE_GCODE_STATE NAME=SET_PRINT_CURRENT_STATE
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=0.9 HOLDCURRENT=0.8
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=0.9 HOLDCURRENT=0.8
    M400
    G4 P1500
    M400
    RESTORE_GCODE_STATE NAME=SET_PRINT_CURRENT_STATE
    M400

## Custom macro setting the stepper current to a higher value to avoid skipping microsteps
## when cutting filament. Called by Happy Hare.
[gcode_macro _SET_CUT_CURRENT]
gcode:
    M400
    SAVE_GCODE_STATE NAME=SET_CUT_CURRENT_STATE_2
    SET_TMC_CURRENT STEPPER=stepper_x CURRENT=1.2 HOLDCURRENT=1.2
    SET_TMC_CURRENT STEPPER=stepper_y CURRENT=1.2 HOLDCURRENT=1.2
    M400
    G4 P1500
    M400
    RESTORE_GCODE_STATE NAME=SET_CUT_CURRENT_STATE_2
    M400

[gcode_macro PARK]
gcode:
  {% set restore = params.RESTORE|default("0")|int %}
  {% set x = params.X|default("175")|float %}
  {% set y = params.Y|default("175")|float %}
  {% set f = params.F|default("21000")|int %}
  
  G90
  
  {% if restore == 1 %}
    # Move to coordinates given by HH as we are restoring position
    G1 X{x} Y{y} F{f}

  RESPOND TYPE=command MSG='PARK.'
  
  {% elif ((printer.gcode_move.gcode_position.x - 35)|abs > 0.05)
        or ((printer.gcode_move.gcode_position.y - 357)|abs > 0.05) %}
    # Perform custom park move to the nozzle stop
    M400
    SAVE_GCODE_STATE NAME=SET_CUT_CURRENT_STATE_1
    
    {% if (printer.gcode_move.gcode_position.y > 315) and (printer.gcode_move.gcode_position.x > 18) %}
      G1 Y315 F21000 #Move infront of the end of the nozzle wiper
    {% endif %}

    G1 X18 F21000   #Move to the start of the nozzle wiper       
    G1 X18 Y357 F21000   #Move to the right Y position aligning with the nozzle wiper
    G1 X35 Y357 F21000   #Move on the nozzle stop
    M400
    RESTORE_GCODE_STATE NAME=SET_CUT_CURRENT_STATE_1
    M400
  {% endif %}

## Custom macro to clean the nozzle on the gantry mounted brush after a toolchange
## Invoked by Happy Hare.
[gcode_macro PARK_PURGE_CLEAN]
gcode:
    # If already close to the park location, dont park.
    {% set x = printer.gcode_move.gcode_position.x %}
    {% set y = printer.gcode_move.gcode_position.y %}
    
    G90
    
    {% if (x > 35 or y < 350) %}
      RESPOND TYPE=command MSG='PARK..'
      PARK
    {% endif %}

    # Run the blobifier macro to purge material
    #MMU_TEST_CONFIG sync_feedback_enable=0 quiet=1
    M400
    RESPOND TYPE=command MSG='BLOBIFIER'
    BLOBIFIER
    M400
    #MMU_TEST_CONFIG sync_feedback_enable=1 quiet=1
    G1 X35 Y357 F18000
    M400
    G90

    RESPOND TYPE=command MSG='Clean'
    # Clean nozzle
    G1 X42 F18000
    G1 X75 F18000
    G1 X42 F18000
    G1 X75 Y356 F18000
    G1 X42 F18000
    G1 X105 F18000

    # Move away from brush
    G1 Y310 F18000

[gcode_macro CLEAN_NOZZLE]
gcode:
    PARK
    M400
    G90
    
    # Clean nozzle
    G1 X42 F18000
    G1 X75 F18000
    G1 X42 F18000
    G1 X75 F18000
    G1 X42 F18000
    G1 X75 Y356 F18000
    G1 X42 F18000
    G1 X75 F18000
    G1 X42 F18000
    G1 X75 F18000
    G1 X42 F18000
    G1 X105 F18000

    # Move away from brush
    G1 Y310 F18000


## Issue push notifications macro from Happy Hare when a print state changes
[gcode_macro _IG_MMU_PRINT_STATE_CHANGED_NOTIFICATIONS]
description: Called when print state changes to raise notifications
gcode:
    {% set state = params.STATE|string %}
    {% set old_state = params.OLD_STATE|string %}
    {% set gate = printer['mmu']['gate'] %}
    
    {% if not old_state == state %}
        {% if state == "pause_locked" %}
            MR_NOTIFY TITLE="MMU ERROR" MESSAGE="Pause locked - error occured"
        {% elif state == "paused" %}
            MR_NOTIFY TITLE="MMU" MESSAGE="Print paused"
        {% elif state == "error" %}
            MR_NOTIFY TITLE="MMU ERROR" MESSAGE="Some error occured"
        {% endif %}
    {% endif %}

[gcode_macro REFRESH_SPOOLMAN]
description: Refresh tool mapping from spoolman
gcode:
    MMU_SPOOLMAN REFRESH=1 SYNC=1

[gcode_macro FILAMENTALIST]
gcode:
    {% set gate = params.GATE | default(0) | int %}
    {% set repeats = params.REPEATS | default(20) | int %}
    {% set speed = params.SPEED | default(300) | float %}
    {% set accel = params.ACCEL | default(400) | float %}
    {% set length = params.LENGTH | default(800) | float %}

    
    {% for n in range(repeats) %}
            MMU_SELECT GATE={gate}
            MMU_TEST_MOVE SPEED={speed} ACCEL={accel} MOVE={length}
            MMU_TEST_MOVE SPEED={speed} ACCEL={accel} MOVE=-{length}
              
    {% endfor %}
